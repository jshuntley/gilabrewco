---
import BaseLayout from "../layouts/BaseLayout.astro";
import type { Brew } from "../types/brew";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

const title = "Gila Brewing Co.";
const description =
  "Craft brewing inspired by the wilderness of the Gila National Forest";
const permalink = new URL(
  Astro.url.pathname,
  Astro.site?.href ?? "https://gilabrewing.com"
).href;

// Get all brews using getCollection
const allBrews: CollectionEntry<'brews'>[] = await getCollection("brews");
const brews: Brew[] = allBrews.map((brew) => brew.data);

// Sort and group brews by status
const tappedBrews: Brew[] = brews
  .filter((brew): brew is Brew => brew.status === "tapped")
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
  .slice(0, 2);

const brewingBrews: Brew[] = brews
  .filter((brew): brew is Brew => brew.status === "brewing")
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
  .slice(0, 2);

const upcomingBrews: Brew[] = brews
  .filter((brew): brew is Brew => brew.status === "upcoming")
  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
  .slice(0, 2);

// Status-specific styling
const statusStyles: Record<Brew['status'], string> = {
  tapped: "text-canyon-red font-bold",
  brewing: "text-sky-blue font-bold",
  upcoming: "text-light-accent dark:text-dark-accent font-bold",
};

---

<BaseLayout title={title} description={description} permalink={permalink}>
  <!-- Hero Section -->
  <div
    class="relative h-[100dvh] flex flex-col justify-between text-center -mt-[72px]"
  >
    <!-- Background Image with Overlay -->
    <div
      class="absolute inset-0 z-[-1]"
      style="background: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url('/assets/images/brewery-hero.jpg') center/cover no-repeat;"
      data-theme-toggle
    >
      <div
        class="absolute inset-0 bg-gradient-to-b from-light-base/30 to-transparent dark:from-black/60 dark:to-transparent"
      >
      </div>
    </div>

    <!-- Content -->
    <div class="relative z-10 px-4 max-w-7xl mx-auto mt-[30vh]">
      <h1
        class="text-[clamp(3rem,8vw,6rem)] font-bold text-white mb-6 opacity-0 translate-y-5 animate-[fadeIn_0.8s_ease_forwards]"
      >
        Gila Brewing Co.
      </h1>
      <p
        class="text-[clamp(1.2rem,3vw,2rem)] text-white/90 max-w-3xl mx-auto mb-12 opacity-0 translate-y-5 animate-[fadeIn_0.8s_ease_forwards_0.2s]"
      >
        A homebrewing duo who love beer and want to share their experiences
      </p>
      <div
        class="flex flex-col sm:flex-row gap-4 sm:gap-6 justify-center opacity-0 translate-y-5 animate-[fadeIn_0.8s_ease_forwards_0.4s]"
      >
        <a
          href="/blog"
          class="w-full sm:w-32 px-8 py-4 bg-light-accent/90 dark:bg-dark-accent/90 text-light-base dark:text-dark-base rounded-lg font-sans font-semibold uppercase tracking-wider transition-all duration-300 hover:bg-light-accent hover:dark:bg-dark-accent hover:-translate-y-0.5 hover:shadow-lg text-center"
        >
          Blog
        </a>
        <a
          href="#about"
          class="w-full sm:w-32 px-8 py-4 bg-white/10 text-white rounded-lg font-sans font-semibold uppercase tracking-wider transition-all duration-300 hover:bg-white/20 hover:-translate-y-0.5 hover:shadow-lg backdrop-blur-sm text-center"
        >
          Beer
        </a>
      </div>
    </div>

    <!-- Scroll Indicator -->
    <a
      href="#about"
      class="relative z-10 mb-8 mx-auto animate-bounce hover:text-canyon-red transition-colors duration-200 cursor-pointer"
      aria-label="Scroll to What's Brewing section"
    >
      <svg
        class="w-6 h-6 text-white"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
      </svg>
    </a>

    <!-- Add smooth scroll behavior -->
    <script>
      const anchors =
        document.querySelectorAll<HTMLAnchorElement>('a[href^="#"]');

      anchors.forEach((anchor) => {
        anchor.addEventListener("click", (e: MouseEvent) => {
          e.preventDefault();
          const href = anchor.getAttribute("href");
          if (!href) return;

          const targetElement = document.querySelector(href);
          if (targetElement) {
            targetElement.scrollIntoView({
              behavior: "smooth",
              block: "start",
            });
          }
        });
      });

      // Theme toggle with proper type assertions
      const themeToggle = document.querySelector(
        "[data-theme-toggle]"
      ) as HTMLElement;

      const updateOverlay = () => {
        if (!themeToggle) return;

        if (document.documentElement.classList.contains("dark")) {
          themeToggle.style.background =
            "linear-gradient(rgba(0,0,0,0.5), rgba(0,0,0,0.5)), url('/assets/images/brewery-hero.jpg') center/cover no-repeat";
        } else {
          themeToggle.style.background =
            "linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.3)), url('/assets/images/brewery-hero.jpg') center/cover no-repeat";
        }
      };

      // Update on theme change with cleanup
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.attributeName === "class") {
            updateOverlay();
          }
        });
      });

      if (document.documentElement) {
        observer.observe(document.documentElement, {
          attributes: true,
        });
      }

      // Initial setup
      updateOverlay();

      // Cleanup on page unload
      window.addEventListener("unload", () => {
        observer.disconnect();
      });
    </script>
  </div>

  <!-- Features Section -->
  <div class="py-24 bg-light-base dark:bg-dark-base" id="about">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-20">
        <h2 
          style="
            background: linear-gradient(to right, var(--from-color), var(--via-color), var(--from-color));
            background-size: 200% 100%;
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            animation: gradientMove 3s linear infinite;
            line-height: 1.4;
            padding-bottom: 0.2em;
          "
          class="text-4xl font-bold mb-4"
        >
          What's Brewing
        </h2>
        <p class="text-xl text-light-text/80 dark:text-dark-text/80 max-w-3xl mx-auto">
          From concept to keg, here's what's happening in our brewhouse
        </p>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-3 gap-12">
        {[
          { title: "In the Works", brews: upcomingBrews, icon: "checklist", emptyText: "No upcoming brews planned", subText: "Planning our next creation" },
          { title: "In the Tank", brews: brewingBrews, icon: "barrel", emptyText: "Nothing brewing at the moment", subText: "New batch coming soon" },
          { title: "In the Keg", brews: tappedBrews, icon: "mug", emptyText: "No beers currently on tap", subText: "Check back soon for new releases" }
        ].map((section: { title: string; brews: Brew[]; icon: string; emptyText: string; subText: string }, sectionIndex) => (
          <div
            class="opacity-0 animate-[fadeIn_0.5s_ease_forwards]"
            style={`animation-delay: ${sectionIndex * 150}ms`}
          >
            <div 
              class="group p-8 bg-white dark:bg-dark-card rounded-xl shadow-md dark:shadow-white/5 
              transition-all duration-300 hover:-translate-y-2 hover:shadow-xl hover:dark:shadow-white/10 
              hover:bg-light-soft/10 dark:hover:bg-dark-soft/10 backdrop-blur-sm 
              hover:border-light-accent/20 dark:hover:border-dark-accent/20 border-2 border-transparent"
            >
              <!-- Section Icons -->
              <div class="mb-6">
                {section.icon === "checklist" && (
                  <svg class="w-12 h-12 text-light-accent dark:text-dark-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
                  </svg>
                )}
                {section.icon === "barrel" && (
                  <svg class="w-12 h-12 text-light-accent dark:text-dark-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M6 8h12M6 16h12"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M7 4h10M7 20h10"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M8 4c-2 0-3 1.79-3 4v8c0 2.21 1 4 3 4M16 4c2 0 3 1.79 3 4v8c0 2.21-1 4-3 4"></path>
                  </svg>
                )}
                {section.icon === "mug" && (
                  <svg class="w-12 h-12 text-light-accent dark:text-dark-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M17 6h1a2 2 0 012 2v2a2 2 0 01-2 2h-1"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M6 6h11v12a2 2 0 01-2 2H8a2 2 0 01-2-2V6z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M7 9s1-1 3-1 3 1 3 1 1-1 3-1"></path>
                  </svg>
                )}
              </div>

              <h3 class="text-2xl font-bold text-light-text dark:text-dark-text mb-4">
                {section.title}
              </h3>

              <div class="space-y-4">
                {section.brews.length > 0 ? (
                  section.brews.map((brew: Brew, brewIndex: number) => (
                    <div 
                      class="opacity-0 animate-[fadeIn_0.5s_ease_forwards] border-b border-light-text/10 dark:border-dark-text/10 pb-4 last:border-b-0"
                      style={`animation-delay: ${(sectionIndex * 3 + brewIndex) * 150}ms`}
                    >
                      <h4 class="font-bold mb-1 text-light-accent dark:text-dark-accent">
                        {brew.name}
                      </h4>
                      <div class="flex items-center text-sm text-light-text/60 dark:text-dark-text/60 mb-2">
                        <span>{brew.style} • {brew.abv}% ABV</span>
                        <span class="inline-flex items-center ml-2">
                          <span 
                            class={`w-2 h-2 rounded-full mr-2 animate-pulse
                              ${brew.status === 'tapped' ? 'bg-canyon-red' : 
                                brew.status === 'brewing' ? 'bg-sky-blue' : 
                                'bg-light-accent dark:bg-dark-accent'}`}
                          ></span>
                          <span class={statusStyles[brew.status]}>
                            {brew.status}
                          </span>
                        </span>
                      </div>
                      <p class="text-light-text/90 dark:text-dark-text/90">
                        {brew.description}
                      </p>
                      {brew.notes && (
                        <p class="text-sm text-light-text/80 dark:text-dark-text/80 mt-2">
                          {brew.notes}
                        </p>
                      )}
                      <div class="mt-2">
                        <span class={statusStyles[brew.status]}>
                          {brew.details}
                        </span>
                      </div>
                    </div>
                  ))
                ) : (
                  <div class="text-center py-8">
                    <p class="text-light-text/60 dark:text-dark-text/60">
                      {section.emptyText}
                    </p>
                    <p class="text-sm text-light-text/40 dark:text-dark-text/40 mt-2">
                      {section.subText}
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</BaseLayout>

<style>
  @keyframes fadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  .animate-gradient {
    animation: gradient 8s ease infinite;
  }
</style>
