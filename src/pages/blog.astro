---
import BaseLayout from "../layouts/BaseLayout.astro";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";

const title = "Blog | Gila Brewing Co.";
const description = "Brewing journal and latest updates from the wilderness";
const permalink = new URL(Astro.url.pathname, Astro.site).href;

const allPosts = await getCollection("blog");
const sortedPosts = allPosts.sort(
  (a, b) =>
    new Date(b.data.publishDate).valueOf() -
    new Date(a.data.publishDate).valueOf()
);

// Get all unique tags
const allTags = [
  ...new Set(sortedPosts.flatMap((post) => post.data.tags || [])),
];

// Estimate reading time
function getReadingTime(content: string) {
  const wordsPerMinute = 200;
  const words = content.split(/\s+/).length;
  return Math.ceil(words / wordsPerMinute);
}
---

<BaseLayout
  title={title}
  description={description}
  permalink={permalink}
  current="blog"
>
  <!-- Hero Section with Parallax -->
  <div class="relative overflow-hidden">
    <div
      class="absolute inset-0 bg-gradient-to-b from-light-text/5 to-transparent dark:from-dark-text/5 dark:to-transparent"
    >
    </div>
    <div class="relative py-24 bg-light-soft dark:bg-dark-soft">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <h1
            class="inline-block text-5xl md:text-6xl font-bold mb-6 px-4 py-4 leading-tight bg-gradient-to-r from-light-text via-light-accent to-light-text dark:from-dark-text dark:via-dark-accent dark:to-dark-text bg-[length:200%_auto] bg-clip-text text-transparent"
          >
            Brewing Journal
          </h1>
          <p
            class="text-xl text-light-text/80 dark:text-dark-text/80 max-w-2xl mx-auto"
          >
            Stories, updates, and insights from our brewing experiences
          </p>
        </div>
      </div>
    </div>
  </div>

  <!-- Tags Filter -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex flex-wrap gap-2 justify-center" id="tag-filters">
      <button
        class="px-4 py-2 rounded-full bg-light-soft dark:bg-dark-soft hover:bg-light-accent/10 dark:hover:bg-dark-accent/10 transition-colors duration-200 text-sm font-medium text-light-text dark:text-dark-text active"
        data-tag="all"
      >
        All Posts
      </button>
      {
        allTags.map((tag) => (
          <button
            class="px-4 py-2 rounded-full bg-light-soft dark:bg-dark-soft hover:bg-light-accent/10 dark:hover:bg-dark-accent/10 transition-colors duration-200 text-sm font-medium text-light-text dark:text-dark-text"
            data-tag={tag}
          >
            {tag}
          </button>
        ))
      }
    </div>
  </div>

  <!-- Blog Posts Grid -->
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
      {
        sortedPosts.map((post) => {
          const href = `/blog/${post.slug}`;
          const readingTime = getReadingTime(post.body);
          return (
            <article
              class="group relative bg-light-card dark:bg-dark-card rounded-2xl shadow-lg overflow-hidden transform transition-all duration-300 hover:-translate-y-1 hover:shadow-xl"
              data-tags={post.data.tags?.join(" ")}
            >
              <div class="aspect-w-16 aspect-h-9 bg-light-soft dark:bg-dark-soft">
                {post.data.image ? (
                  <Image
                    src={post.data.image}
                    alt={post.data.title}
                    width={800}
                    height={450}
                    class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-[1.02]"
                  />
                ) : (
                  <div class="flex items-center justify-center h-full">
                    <svg
                      class="w-12 h-12 text-light-muted dark:text-dark-muted"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                      />
                    </svg>
                  </div>
                )}
              </div>
              <div class="p-6">
                <div class="flex items-center gap-4 text-sm text-light-text/60 dark:text-dark-text/60 mb-4">
                  <time datetime={post.data.publishDate.toISOString()}>
                    {new Date(post.data.publishDate).toLocaleDateString(
                      "en-us",
                      {
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                      }
                    )}
                  </time>
                  <span class="flex items-center">
                    <svg
                      class="w-4 h-4 mr-1"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"
                      />
                    </svg>
                    {readingTime} min read
                  </span>
                </div>
                <h2 class="text-xl font-bold mb-3 line-clamp-2">
                  <a
                    href={href}
                    class="hover:text-light-accent dark:hover:text-dark-accent transition-colors duration-200"
                  >
                    {post.data.title}
                  </a>
                </h2>
                <p class="text-light-text/80 dark:text-dark-text/80 mb-4 line-clamp-3">
                  {post.data.description}
                </p>
                {post.data.tags && (
                  <div class="flex flex-wrap gap-2 mb-4">
                    {post.data.tags.map((tag) => (
                      <span class="px-2 py-1 text-xs rounded-full bg-light-soft dark:bg-dark-soft text-light-text/70 dark:text-dark-text/70">
                        {tag}
                      </span>
                    ))}
                  </div>
                )}
                <a
                  href={href}
                  class="inline-flex items-center text-light-accent dark:text-dark-accent hover:text-light-muted dark:hover:text-dark-muted transition-colors duration-200"
                >
                  Read more
                  <svg
                    class="ml-2 w-4 h-4 transition-transform duration-200 group-hover:translate-x-1"
                    viewBox="0 0 20 20"
                    fill="currentColor"
                  >
                    <path
                      fill-rule="evenodd"
                      d="M12.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-2.293-2.293a1 1 0 010-1.414z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </a>
              </div>
            </article>
          );
        })
      }
    </div>
  </div>
</BaseLayout>

<script>
  // Tag filtering functionality
  const tagButtons = document.querySelectorAll("#tag-filters button");
  const articles = document.querySelectorAll("article");

  tagButtons.forEach((button) => {
    button.addEventListener("click", () => {
      const tag = button.getAttribute("data-tag") || "all";

      // Update active button state
      tagButtons.forEach((btn) =>
        btn.classList.remove("bg-canyon-red/10", "dark:bg-sky-blue/10")
      );
      button.classList.add("bg-canyon-red/10", "dark:bg-sky-blue/10");

      // Filter articles
      articles.forEach((article) => {
        if (tag === "all") {
          article.style.display = "block";
          return;
        }

        const articleTags = article.getAttribute("data-tags")?.split(" ") || [];
        article.style.display = articleTags.includes(tag) ? "block" : "none";
      });
    });
  });
</script>

<style>
  /* Smooth transitions for article filtering */
  article {
    transition: all 0.3s ease-in-out;
  }

  /* Gradient text animation */
  h1 {
    background-size: 200% auto;
    animation: gradient 8s ease infinite;
    padding-bottom: 0.25em;
  }

  @keyframes gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  /* Aspect ratio fallback */
  .aspect-w-16.aspect-h-9 {
    position: relative;
    padding-bottom: 56.25%;
  }

  .aspect-w-16.aspect-h-9 > * {
    position: absolute;
    height: 100%;
    width: 100%;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
  }
</style>
