---
const { fallback } = Astro.props;
---

<div id="error-boundary">
  <slot />
  <template id="error-template">
    <div class="error-container">
      <h2>Something went wrong</h2>
      <p>{fallback}</p>
      <button onclick="window.location.reload()">Try again</button>
    </div>
  </template>
</div>

<script>
  interface ErrorState {
    hasError: boolean;
  }

  interface ErrorEvent {
    error: Error;
    message: string;
  }

  interface PromiseRejectionEvent {
    reason: any;
    promise: Promise<any>;
  }

  class ErrorBoundary extends HTMLElement {
    private state: ErrorState;

    constructor() {
      super();
      this.state = { hasError: false };
    }

    static getDerivedStateFromError(error: Error): ErrorState {
      return { hasError: true };
    }

    connectedCallback(): void {
      window.addEventListener("error", this.handleError.bind(this));
      window.addEventListener(
        "unhandledrejection",
        this.handleError.bind(this)
      );
    }

    disconnectedCallback(): void {
      window.removeEventListener("error", this.handleError.bind(this));
      window.removeEventListener(
        "unhandledrejection",
        this.handleError.bind(this)
      );
    }

    handleError(event: ErrorEvent | PromiseRejectionEvent): void {
      const template = this.querySelector("#error-template");
      if (template instanceof HTMLTemplateElement && !this.state.hasError) {
        this.state.hasError = true;
        this.innerHTML = template.innerHTML;
      }
    }
  }

  customElements.define("error-boundary", ErrorBoundary);
</script>

<style>
  .error-container {
    padding: 2rem;
    text-align: center;
    background: var(--light-soft);
    border-radius: 0.5rem;
    margin: 1rem 0;
  }
</style>
