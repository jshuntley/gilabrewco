---
import "../styles/fonts.css";
import "../styles/global.css";

export interface Props {
  title: string;
  description: string;
  permalink: string;
}

const { title, description, permalink } = Astro.props;
const socialUrl = new URL(
  "assets/social.png",
  Astro.site?.href ?? "https://gilabrewing.com/"
).href;

// Declare global window interface
declare global {
  interface Window {
    themeToggle: {
      toggle: () => boolean;
    };
  }
}
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width" />
<link rel="icon" type="image/x-icon" href="/favicon.ico" />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={permalink} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={socialUrl} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={permalink} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={socialUrl} />

<!-- Theme handling script -->
<script is:inline define:vars={{ isDark: false }}>
  (function () {
    function applyTheme(theme) {
      document.documentElement.classList.toggle("dark", theme === "dark");
      localStorage.setItem("theme", theme);
    }

    // Get initial theme
    const theme =
      localStorage.getItem("theme") ||
      (window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light");

    // Apply theme immediately
    applyTheme(theme);

    // Handle system theme changes
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (e) => {
        if (!localStorage.getItem("theme")) {
          applyTheme(e.matches ? "dark" : "light");
        }
      });

    // Make theme functions available globally
    window.themeToggle = {
      toggle: () => {
        const isDark = document.documentElement.classList.contains("dark");
        applyTheme(isDark ? "light" : "dark");
        return !isDark;
      },
    };
  })();
</script>

<script>
  // Handle theme toggle clicks
  document.addEventListener(
    "astro:page-load",
    () => {
      const toggle = document.getElementById("theme-toggle");
      if (toggle) {
        toggle.addEventListener("click", () => {
          const isDark = window.themeToggle?.toggle();
          toggle.setAttribute("aria-checked", isDark.toString());
        });
      }
    },
    { once: false }
  );

  // Handle theme persistence during transitions
  document.addEventListener(
    "astro:after-swap",
    () => {
      const theme =
        localStorage.getItem("theme") ||
        (window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light");
      document.documentElement.classList.toggle("dark", theme === "dark");
    },
    { once: false }
  );
</script>
