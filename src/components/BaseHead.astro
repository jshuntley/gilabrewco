---
// Import global styles once
import "../styles/fonts.css";
import "../styles/global.css";

export interface Props {
  title: string;
  description: string;
  permalink: string;
  ogImage?: string;
}

const { title, description, permalink, ogImage } = Astro.props;
const defaultOgImage = new URL("assets/social.png", Astro.site).href;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta
  name="viewport"
  content="width=device-width,initial-scale=1,viewport-fit=cover"
/>
<meta http-equiv="X-UA-Compatible" content="IE=edge" />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="article" />
<meta property="og:site_name" content="Gila Brewing Co." />
<meta property="og:url" content={permalink} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={ogImage || defaultOgImage} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />

<!-- Twitter Card -->
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content="@gilabrewco" />
<meta name="twitter:url" content={permalink} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={ogImage || defaultOgImage} />

<!-- Theme handling script -->
<script is:inline>
  // Initialize theme on page load
  function initTheme() {
    const theme =
      localStorage.getItem("theme") ||
      (window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light");
    document.documentElement.classList.toggle("dark", theme === "dark");
  }

  // Make theme functions available globally
  window.themeToggle = {
    toggle: () => {
      const isDark = document.documentElement.classList.contains("dark");
      const newTheme = isDark ? "light" : "dark";
      localStorage.setItem("theme", newTheme);
      document.documentElement.classList.toggle("dark", !isDark);
      return !isDark;
    },
  };

  // Initialize theme toggle button
  function initThemeToggle() {
    const toggle = document.getElementById("theme-toggle");
    if (toggle) {
      // Clean up old event listeners
      const newToggle = toggle.cloneNode(true);
      toggle.parentNode?.replaceChild(newToggle, toggle);

      // Set initial state
      newToggle.setAttribute(
        "aria-checked",
        document.documentElement.classList.contains("dark").toString()
      );

      // Add new event listener
      newToggle.addEventListener("click", () => {
        const isDark = window.themeToggle?.toggle() ?? false;
        newToggle.setAttribute("aria-checked", isDark.toString());
      });
    }
  }

  // Make initThemeToggle available globally
  window.initThemeToggle = initThemeToggle;

  // Run on initial page load
  document.addEventListener("DOMContentLoaded", () => {
    initTheme();
    initThemeToggle();
  });

  // Handle system theme changes
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (e) => {
      if (!localStorage.getItem("theme")) {
        document.documentElement.classList.toggle("dark", e.matches);
        initThemeToggle();
      }
    });

  // Handle view transitions
  document.addEventListener("astro:after-swap", () => {
    requestAnimationFrame(() => {
      initTheme();
      initThemeToggle();
    });
  });
</script>
