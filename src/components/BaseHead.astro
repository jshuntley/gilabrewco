---
import { ClientRouter } from "astro:transitions";
import "../styles/fonts.css";
import "../styles/global.css";

export interface Props {
  title: string;
  description: string;
  permalink: string;
}

const { title, description, permalink } = Astro.props;
const socialUrl = new URL(
  "assets/social.png",
  Astro.site?.href ?? "https://gilabrewing.com/"
).href;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width" />
<link rel="icon" type="image/x-icon" href="/favicon.ico" />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={permalink} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={socialUrl} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={permalink} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={socialUrl} />

<!-- This is intentionally inlined to avoid FOUC -->
<script is:inline>
  (function () {
    function applyTheme(theme) {
      const root = document.documentElement;
      const isDark = theme === "dark";

      // Apply theme class
      root.classList.toggle("dark", isDark);

      // Update toggle if it exists
      const toggle = document.getElementById("theme-toggle");
      if (toggle) {
        toggle.setAttribute("aria-checked", isDark.toString());
      }

      // Store theme
      localStorage.setItem("theme", theme);
    }

    // Get initial theme
    const theme = (() => {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    })();

    // Apply theme immediately
    applyTheme(theme);

    // Handle system theme changes
    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", (e) => {
        if (!localStorage.getItem("theme")) {
          applyTheme(e.matches ? "dark" : "light");
        }
      });

    // Make applyTheme available globally for view transitions
    window.__theme = { applyTheme };
  })();
</script>

<ClientRouter />

<script>
  // Handle theme persistence during view transitions
  document.addEventListener("astro:after-swap", () => {
    const theme =
      localStorage.getItem("theme") ||
      (window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light");

    // Use the global applyTheme function
    window.__theme?.applyTheme(theme);
  });

  // Handle theme toggle clicks
  document.addEventListener("astro:page-load", () => {
    const toggle = document.getElementById("theme-toggle");
    if (toggle) {
      toggle.addEventListener("click", () => {
        const newTheme = document.documentElement.classList.contains("dark")
          ? "light"
          : "dark";
        window.__theme?.applyTheme(newTheme);
      });
    }
  });
</script>

<script>
  // TypeScript type declaration for the global theme object
  interface Window {
    __theme?: {
      applyTheme: (theme: string) => void;
    };
  }
</script>
